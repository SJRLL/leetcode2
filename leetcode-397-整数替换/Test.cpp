给定一个正整数 n，你可以做如下操作：

1. 如果 n 是偶数，则用 n / 2替换 n。
2. 如果 n 是奇数，则可以用 n + 1或n - 1替换 n。
n 变为 1 所需的最小替换次数是多少？

示例 1:

输入 :
	8

输出 :
   3

解释 :
   8 -> 4 -> 2 -> 1
   示例 2 :

输入 :
   7

输出 :
   4

解释 :
   7 -> 8 -> 4 -> 2 -> 1
   或
   7 -> 6 -> 3 -> 2 -> 1

 //解题思路：这道题的核心思想是将一个数字的二进制变化为只有最高位为1，其余为0。我们可以根据不同bit逐位判断。

//如果数位上是0，直接到下一个bit并且步数 + 1；如果是1，则步数 + 2，并且根据下一位到底是1 / 0，执行加减操作。
//如果下一位同为1，则 + 1（一步去掉2个‘1’）；如为0，则 - 1。（即不做任何操作）

   class Solution {
   public:
	   int integerReplacement(int n) {
		   int ret = 0;
		   while (n > 3){
			   if (n % 2){
				   n >>= 1;
				   if (n % 2) n++;
				   ret += 2;
			   }
			   else{
				   n >>= 1;
				   ret++;
			   }
		   }
		   return ret + n - 1;
	   }
   };

